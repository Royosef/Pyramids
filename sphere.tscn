[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/Icosphere.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.5);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_alpha = float(1.0);
	vec3 node1_in19_normal = NORMAL;
	vec3 node1_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=3]
resource_name = "Icosphere002"
surfaces/0 = {
"aabb": AABB( -0.894425, -1, -0.85064, 1.78885, 2, 1.70128 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 23, 156, 73, 0, 124, 20, 244, 127, 255, 51, 0, 60, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 63, 23, 156, 73, 0, 124, 20, 244, 127, 255, 55, 216, 58, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 63, 23, 156, 73, 0, 124, 20, 244, 127, 120, 54, 103, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 63, 77, 156, 0, 0, 76, 58, 174, 127, 255, 55, 137, 56, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 77, 156, 0, 0, 76, 58, 174, 127, 255, 55, 216, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 191, 77, 156, 0, 0, 76, 58, 174, 127, 195, 56, 103, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 194, 156, 45, 0, 74, 0, 102, 127, 255, 51, 0, 60, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 63, 194, 156, 45, 0, 74, 0, 102, 127, 120, 54, 103, 58, 9, 249, 100, 191, 93, 249, 228, 190, 0, 0, 0, 0, 194, 156, 45, 0, 74, 0, 102, 127, 28, 46, 103, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 194, 156, 211, 0, 206, 236, 114, 127, 255, 51, 0, 60, 9, 249, 100, 191, 93, 249, 228, 190, 0, 0, 0, 0, 194, 156, 211, 0, 206, 236, 114, 127, 28, 46, 103, 58, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 191, 194, 156, 211, 0, 206, 236, 114, 127, 0, 0, 216, 58, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 23, 156, 183, 0, 60, 74, 173, 127, 255, 55, 216, 58, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 191, 23, 156, 183, 0, 60, 74, 173, 127, 255, 57, 0, 60, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 191, 23, 156, 183, 0, 60, 74, 173, 127, 195, 56, 103, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 63, 124, 233, 0, 0, 19, 99, 181, 127, 255, 55, 137, 56, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 191, 124, 233, 0, 0, 19, 99, 181, 127, 195, 56, 103, 58, 9, 249, 100, 63, 93, 249, 228, 62, 0, 0, 0, 0, 124, 233, 0, 0, 19, 99, 181, 127, 255, 57, 67, 56, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 63, 38, 233, 118, 0, 120, 22, 222, 127, 120, 54, 103, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 63, 38, 233, 118, 0, 120, 22, 222, 127, 255, 55, 216, 58, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 63, 38, 233, 118, 0, 120, 22, 222, 127, 255, 55, 137, 56, 9, 249, 100, 191, 93, 249, 228, 190, 0, 0, 0, 0, 156, 233, 73, 0, 74, 0, 102, 127, 28, 46, 103, 58, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 63, 156, 233, 73, 0, 74, 0, 102, 127, 120, 54, 103, 58, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 63, 156, 233, 73, 0, 74, 0, 102, 127, 255, 51, 67, 56, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 191, 156, 233, 183, 0, 187, 234, 103, 127, 0, 0, 216, 58, 9, 249, 100, 191, 93, 249, 228, 190, 0, 0, 0, 0, 156, 233, 183, 0, 187, 234, 103, 127, 28, 46, 103, 58, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 191, 156, 233, 183, 0, 187, 234, 103, 127, 0, 0, 137, 56, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 191, 38, 233, 138, 0, 202, 108, 217, 127, 195, 56, 103, 58, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 191, 38, 233, 138, 0, 202, 108, 217, 127, 255, 57, 0, 60, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 191, 38, 233, 138, 0, 202, 108, 217, 127, 60, 59, 103, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 63, 100, 23, 73, 0, 36, 91, 176, 127, 255, 55, 137, 56, 9, 249, 100, 63, 93, 249, 228, 62, 0, 0, 0, 0, 100, 23, 73, 0, 36, 91, 176, 127, 255, 57, 67, 56, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 63, 100, 23, 73, 0, 36, 91, 176, 127, 255, 57, 195, 54, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 63, 218, 23, 118, 0, 120, 14, 36, 127, 120, 54, 103, 58, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 63, 218, 23, 118, 0, 120, 14, 36, 127, 255, 55, 137, 56, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 63, 218, 23, 118, 0, 120, 14, 36, 127, 255, 51, 67, 56, 9, 249, 100, 191, 93, 249, 228, 190, 0, 0, 0, 0, 132, 23, 0, 0, 254, 242, 126, 127, 28, 46, 103, 58, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 63, 132, 23, 0, 0, 254, 242, 126, 127, 255, 51, 67, 56, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 191, 132, 23, 0, 0, 254, 242, 126, 127, 0, 0, 137, 56, 86, 130, 141, 190, 93, 249, 228, 190, 139, 195, 89, 191, 218, 23, 138, 0, 142, 33, 43, 127, 255, 57, 0, 60, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 191, 218, 23, 138, 0, 142, 33, 43, 127, 0, 60, 216, 58, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 191, 218, 23, 138, 0, 142, 33, 43, 127, 60, 59, 103, 58, 217, 61, 57, 63, 93, 249, 228, 190, 150, 149, 6, 191, 100, 23, 183, 0, 202, 108, 217, 127, 195, 56, 103, 58, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 191, 100, 23, 183, 0, 202, 108, 217, 127, 60, 59, 103, 58, 9, 249, 100, 63, 93, 249, 228, 62, 0, 0, 0, 0, 100, 23, 183, 0, 202, 108, 217, 127, 255, 57, 67, 56, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 63, 62, 100, 45, 0, 146, 56, 26, 127, 255, 57, 195, 54, 9, 249, 100, 63, 93, 249, 228, 62, 0, 0, 0, 0, 62, 100, 45, 0, 146, 56, 26, 127, 255, 57, 67, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 62, 100, 45, 0, 146, 56, 26, 127, 0, 60, 137, 56, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 63, 233, 100, 73, 0, 124, 17, 16, 127, 255, 51, 67, 56, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 63, 233, 100, 73, 0, 124, 17, 16, 127, 255, 55, 137, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 233, 100, 73, 0, 124, 17, 16, 127, 255, 51, 195, 54, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 191, 179, 100, 0, 0, 234, 239, 123, 127, 0, 0, 137, 56, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 63, 179, 100, 0, 0, 234, 239, 123, 127, 255, 51, 67, 56, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 179, 100, 0, 0, 234, 239, 123, 127, 255, 51, 195, 54, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 191, 233, 100, 183, 0, 143, 13, 55, 127, 60, 59, 103, 58, 217, 61, 57, 191, 93, 249, 228, 62, 150, 149, 6, 191, 233, 100, 183, 0, 143, 13, 55, 127, 0, 60, 216, 58, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 233, 100, 183, 0, 143, 13, 55, 127, 0, 60, 137, 56, 9, 249, 100, 63, 93, 249, 228, 62, 0, 0, 0, 0, 62, 100, 211, 0, 152, 70, 13, 127, 255, 57, 67, 56, 86, 130, 141, 62, 93, 249, 228, 62, 139, 195, 89, 191, 62, 100, 211, 0, 152, 70, 13, 127, 60, 59, 103, 58, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 62, 100, 211, 0, 152, 70, 13, 127, 0, 60, 137, 56 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 51, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 57, 0, 59, 0, 58, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 60,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 60
}

[node name="Icosphere" type="MeshInstance"]
mesh = SubResource( 3 )
material/0 = null
